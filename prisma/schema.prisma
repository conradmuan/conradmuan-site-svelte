// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Posts {
  id              Int       @id @default(autoincrement())
  title           String
  slug            String    @unique
  content         String?
  titleRendered   String
  contentRendered String?
  published       Boolean   @default(false)
  dateCreated     DateTime  @updatedAt
  dateUpdated     DateTime?
}

// Catch all content, I'll have to figure out what to do with this later
model CustomFields {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  value         String?
  valueRendered String?
  dateCreated   DateTime  @updatedAt
  dateUpdated   DateTime?
}

model Book {
  id            Int                     @id @default(autoincrement())
  title         String
  subtitle      String?
  description   String?
  thumbnail     String?
  publishedDate DateTime?
  dateCreated   DateTime                @updatedAt
  authors       AuthorsOnBook[]
  categories    BookCategoriesOnBooks[]
}

model Authors {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  dateCreated   DateTime        @updatedAt
  AuthorsOnBook AuthorsOnBook[]
}

model AuthorsOnBook {
  id       Int     @id @default(autoincrement())
  book     Book    @relation(fields: [bookId], references: [id])
  bookId   Int
  author   Authors @relation(fields: [authorId], references: [id])
  authorId Int

  @@index([bookId, authorId])
}

model BookCategories {
  id                    Int                     @id @default(autoincrement())
  category              String                  @unique
  dateCreated           DateTime                @updatedAt
  BookCategoriesOnBooks BookCategoriesOnBooks[]
}

model BookCategoriesOnBooks {
  id             Int            @id @default(autoincrement())
  book           Book           @relation(fields: [bookId], references: [id])
  bookId         Int
  bookCategory   BookCategories @relation(fields: [bookCategoryId], references: [id])
  bookCategoryId Int

  @@index([bookId, bookCategoryId])
}

model Users {
  id          Int        @id @default(autoincrement())
  username    String
  email       String
  password    String
  dateCreated DateTime   @updatedAt
  dateUpdated DateTime?
  sessions    Sessions[]
  Files       Files[]
}

model Sessions {
  id          String   @id @default(uuid())
  userId      Int
  user        Users    @relation(fields: [userId], references: [id])
  dateCreated DateTime @updatedAt
  dateExpires DateTime
}

model Files {
  id            Int       @id @default(autoincrement())
  name          String
  path          String    @unique // This is the path to the file on the server
  uri           String    @unique // This is the uri to the file.
  mimeType      String
  addedByUserId Int
  addedByUser   Users     @relation(fields: [addedByUserId], references: [id])
  dateCreated   DateTime  @updatedAt
  dateUpdated   DateTime?
}
